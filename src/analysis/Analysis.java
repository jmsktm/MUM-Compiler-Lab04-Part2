/* This file was generated by SableCC (http://www.sablecc.org/). */

package analysis;

import node.*;

public interface Analysis extends Switch
{
    Object getIn(Node node);
    void setIn(Node node, Object o);
    Object getOut(Node node);
    void setOut(Node node, Object o);

    void caseStart(Start node);
    void caseAProgram(AProgram node);
    void caseAClassDecls(AClassDecls node);
    void caseASingleClassDecls(ASingleClassDecls node);
    void caseAEmptyClassDecl(AEmptyClassDecl node);
    void caseAClassDecl(AClassDecl node);
    void caseAClassHdr(AClassHdr node);
    void caseAMemberDecls(AMemberDecls node);
    void caseASingleMemberDecls(ASingleMemberDecls node);
    void caseAFieldMember(AFieldMember node);
    void caseAMethodMember(AMethodMember node);
    void caseAEmptyMember(AEmptyMember node);
    void caseAField(AField node);
    void caseAInitializedField(AInitializedField node);
    void caseAArrayField(AArrayField node);
    void caseABoolType(ABoolType node);
    void caseACharType(ACharType node);
    void caseAFloatType(AFloatType node);
    void caseAIntType(AIntType node);
    void caseAStringType(AStringType node);
    void caseAMethod(AMethod node);
    void caseANoParamMethod(ANoParamMethod node);
    void caseANoReturnMethodHdr(ANoReturnMethodHdr node);
    void caseAMethodHdr(AMethodHdr node);
    void caseAFormals(AFormals node);
    void caseASingleFormals(ASingleFormals node);
    void caseAFormal(AFormal node);
    void caseAArrayTypeFormal(AArrayTypeFormal node);
    void caseABlock(ABlock node);
    void caseAEmptyBlock(AEmptyBlock node);
    void caseAMultStmts(AMultStmts node);
    void caseAStmts(AStmts node);
    void caseACondition(ACondition node);
    void caseALocalDeclStmt(ALocalDeclStmt node);
    void caseAAssignmentStmt(AAssignmentStmt node);
    void caseAMethodCallStmt(AMethodCallStmt node);
    void caseAReturnVoidStmt(AReturnVoidStmt node);
    void caseAReturnExprStmt(AReturnExprStmt node);
    void caseABlockStmt(ABlockStmt node);
    void caseAWhileLoopStmt(AWhileLoopStmt node);
    void caseADoWhileLoopStmt(ADoWhileLoopStmt node);
    void caseAEmptyStmt(AEmptyStmt node);
    void caseAMatchedGenericStmt(AMatchedGenericStmt node);
    void caseAUnmatchedGenericStmt(AUnmatchedGenericStmt node);
    void caseAIfElseMatched(AIfElseMatched node);
    void caseAStmtMatched(AStmtMatched node);
    void caseAIfUnmatched(AIfUnmatched node);
    void caseAIfElseUnmatched(AIfElseUnmatched node);
    void caseALocalDecl(ALocalDecl node);
    void caseAInitializedLocalDecl(AInitializedLocalDecl node);
    void caseAArrayLocalDecl(AArrayLocalDecl node);
    void caseAFieldAccess(AFieldAccess node);
    void caseASizedArrayFieldAccess(ASizedArrayFieldAccess node);
    void caseAArrayFieldAccess(AArrayFieldAccess node);
    void caseAParameterizedArrayFieldAccess(AParameterizedArrayFieldAccess node);
    void caseAQualifiedFieldAccess(AQualifiedFieldAccess node);
    void caseANoArgMethodCall(ANoArgMethodCall node);
    void caseAMethodCall(AMethodCall node);
    void caseAMultArgs(AMultArgs node);
    void caseAArgs(AArgs node);
    void caseAOrExpr(AOrExpr node);
    void caseANotAnOrExpr(ANotAnOrExpr node);
    void caseAAndExpr(AAndExpr node);
    void caseANotAnAndExpr(ANotAnAndExpr node);
    void caseAEqualsEqualityExpr(AEqualsEqualityExpr node);
    void caseANotEqualsEqualityExpr(ANotEqualsEqualityExpr node);
    void caseANotAnEqualityExpr(ANotAnEqualityExpr node);
    void caseALessThanComparisonExpr(ALessThanComparisonExpr node);
    void caseAGreaterThanComparisonExpr(AGreaterThanComparisonExpr node);
    void caseALessThanOrEqComparisonExpr(ALessThanOrEqComparisonExpr node);
    void caseAGreaterThanOrEqComparisonExpr(AGreaterThanOrEqComparisonExpr node);
    void caseANotAComparisonExpr(ANotAComparisonExpr node);
    void caseAAddArithExpr(AAddArithExpr node);
    void caseASubArithExpr(ASubArithExpr node);
    void caseANotAnArithExpr(ANotAnArithExpr node);
    void caseAMultiplyFactExpr(AMultiplyFactExpr node);
    void caseADivideFactExpr(ADivideFactExpr node);
    void caseAModuloFactExpr(AModuloFactExpr node);
    void caseANotAFactExpr(ANotAFactExpr node);
    void caseANotUnaryExpr(ANotUnaryExpr node);
    void caseAPlusUnaryExpr(APlusUnaryExpr node);
    void caseAMinusUnaryExpr(AMinusUnaryExpr node);
    void caseANotAUnaryExpr(ANotAUnaryExpr node);
    void caseAFieldPrimary(AFieldPrimary node);
    void caseAMethodCallPrimary(AMethodCallPrimary node);
    void caseAIntLiteralPrimary(AIntLiteralPrimary node);
    void caseACharLiteralPrimary(ACharLiteralPrimary node);
    void caseAStrLiteralPrimary(AStrLiteralPrimary node);
    void caseAFloatLiteralPrimary(AFloatLiteralPrimary node);
    void caseATrueLiteralPrimary(ATrueLiteralPrimary node);
    void caseAFalseLiteralPrimary(AFalseLiteralPrimary node);
    void caseAExprPrimary(AExprPrimary node);
    void caseANumericIntegerValue(ANumericIntegerValue node);
    void caseAIdentifierIntegerValue(AIdentifierIntegerValue node);

    void caseTComment(TComment node);
    void caseTStringLiteral(TStringLiteral node);
    void caseTCharLiteral(TCharLiteral node);
    void caseTEscapeStringLiteral(TEscapeStringLiteral node);
    void caseTEscape(TEscape node);
    void caseTPlus(TPlus node);
    void caseTMinus(TMinus node);
    void caseTMult(TMult node);
    void caseTDiv(TDiv node);
    void caseTLessThan(TLessThan node);
    void caseTLessThanOrEq(TLessThanOrEq node);
    void caseTGreaterThan(TGreaterThan node);
    void caseTGreaterThanOrEq(TGreaterThanOrEq node);
    void caseTEquals(TEquals node);
    void caseTAnd(TAnd node);
    void caseTOr(TOr node);
    void caseTNot(TNot node);
    void caseTColon(TColon node);
    void caseTSemicolon(TSemicolon node);
    void caseTComma(TComma node);
    void caseTLPar(TLPar node);
    void caseTRPar(TRPar node);
    void caseTLBrace(TLBrace node);
    void caseTRBrace(TRBrace node);
    void caseTLBkt(TLBkt node);
    void caseTRBkt(TRBkt node);
    void caseTNotEquals(TNotEquals node);
    void caseTEqualTo(TEqualTo node);
    void caseTPointer(TPointer node);
    void caseTDot(TDot node);
    void caseTModulo(TModulo node);
    void caseTFloatLit(TFloatLit node);
    void caseTWhiteSpace(TWhiteSpace node);
    void caseTBool(TBool node);
    void caseTBreak(TBreak node);
    void caseTChar(TChar node);
    void caseTConst(TConst node);
    void caseTContinue(TContinue node);
    void caseTKclass(TKclass node);
    void caseTDo(TDo node);
    void caseTElse(TElse node);
    void caseTFalse(TFalse node);
    void caseTFloat(TFloat node);
    void caseTIf(TIf node);
    void caseTInt(TInt node);
    void caseTNew(TNew node);
    void caseTNull(TNull node);
    void caseTPrivate(TPrivate node);
    void caseTProtected(TProtected node);
    void caseTPublic(TPublic node);
    void caseTReturn(TReturn node);
    void caseTStatic(TStatic node);
    void caseTString(TString node);
    void caseTStruct(TStruct node);
    void caseTThis(TThis node);
    void caseTTrue(TTrue node);
    void caseTWhile(TWhile node);
    void caseTVoid(TVoid node);
    void caseTIntegerLiteral(TIntegerLiteral node);
    void caseTIdentifier(TIdentifier node);
    void caseEOF(EOF node);
    void caseInvalidToken(InvalidToken node);
}
