/* This file was generated by SableCC (http://www.sablecc.org/). */

package analysis;

import java.util.*;
import node.*;

public class AnalysisAdapter implements Analysis
{
    private Hashtable<Node,Object> in;
    private Hashtable<Node,Object> out;

    @Override
    public Object getIn(Node node)
    {
        if(this.in == null)
        {
            return null;
        }

        return this.in.get(node);
    }

    @Override
    public void setIn(Node node, Object o)
    {
        if(this.in == null)
        {
            this.in = new Hashtable<Node,Object>(1);
        }

        if(o != null)
        {
            this.in.put(node, o);
        }
        else
        {
            this.in.remove(node);
        }
    }

    @Override
    public Object getOut(Node node)
    {
        if(this.out == null)
        {
            return null;
        }

        return this.out.get(node);
    }

    @Override
    public void setOut(Node node, Object o)
    {
        if(this.out == null)
        {
            this.out = new Hashtable<Node,Object>(1);
        }

        if(o != null)
        {
            this.out.put(node, o);
        }
        else
        {
            this.out.remove(node);
        }
    }

    @Override
    public void caseStart(Start node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAProgram(AProgram node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAClassDecls(AClassDecls node)
    {
        defaultCase(node);
    }

    @Override
    public void caseASingleClassDecls(ASingleClassDecls node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAEmptyClassDecl(AEmptyClassDecl node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAClassDecl(AClassDecl node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAClassHdr(AClassHdr node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAMemberDecls(AMemberDecls node)
    {
        defaultCase(node);
    }

    @Override
    public void caseASingleMemberDecls(ASingleMemberDecls node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAFieldMember(AFieldMember node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAMethodMember(AMethodMember node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAEmptyMember(AEmptyMember node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAField(AField node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAInitializedField(AInitializedField node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAArrayField(AArrayField node)
    {
        defaultCase(node);
    }

    @Override
    public void caseABoolType(ABoolType node)
    {
        defaultCase(node);
    }

    @Override
    public void caseACharType(ACharType node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAFloatType(AFloatType node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAIntType(AIntType node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAStringType(AStringType node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAMethod(AMethod node)
    {
        defaultCase(node);
    }

    @Override
    public void caseANoParamMethod(ANoParamMethod node)
    {
        defaultCase(node);
    }

    @Override
    public void caseANoReturnMethodHdr(ANoReturnMethodHdr node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAMethodHdr(AMethodHdr node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAFormals(AFormals node)
    {
        defaultCase(node);
    }

    @Override
    public void caseASingleFormals(ASingleFormals node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAFormal(AFormal node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAArrayTypeFormal(AArrayTypeFormal node)
    {
        defaultCase(node);
    }

    @Override
    public void caseABlock(ABlock node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAEmptyBlock(AEmptyBlock node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAMultStmts(AMultStmts node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAStmts(AStmts node)
    {
        defaultCase(node);
    }

    @Override
    public void caseACondition(ACondition node)
    {
        defaultCase(node);
    }

    @Override
    public void caseALocalDeclStmt(ALocalDeclStmt node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAssignmentStmt(AAssignmentStmt node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAMethodCallStmt(AMethodCallStmt node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAReturnVoidStmt(AReturnVoidStmt node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAReturnExprStmt(AReturnExprStmt node)
    {
        defaultCase(node);
    }

    @Override
    public void caseABlockStmt(ABlockStmt node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAWhileLoopStmt(AWhileLoopStmt node)
    {
        defaultCase(node);
    }

    @Override
    public void caseADoWhileLoopStmt(ADoWhileLoopStmt node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAEmptyStmt(AEmptyStmt node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAMatchedGenericStmt(AMatchedGenericStmt node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAUnmatchedGenericStmt(AUnmatchedGenericStmt node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAIfElseMatched(AIfElseMatched node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAStmtMatched(AStmtMatched node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAIfUnmatched(AIfUnmatched node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAIfElseUnmatched(AIfElseUnmatched node)
    {
        defaultCase(node);
    }

    @Override
    public void caseALocalDecl(ALocalDecl node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAInitializedLocalDecl(AInitializedLocalDecl node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAArrayLocalDecl(AArrayLocalDecl node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAFieldAccess(AFieldAccess node)
    {
        defaultCase(node);
    }

    @Override
    public void caseASizedArrayFieldAccess(ASizedArrayFieldAccess node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAArrayFieldAccess(AArrayFieldAccess node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAParameterizedArrayFieldAccess(AParameterizedArrayFieldAccess node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAQualifiedFieldAccess(AQualifiedFieldAccess node)
    {
        defaultCase(node);
    }

    @Override
    public void caseANoArgMethodCall(ANoArgMethodCall node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAMethodCall(AMethodCall node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAMultArgs(AMultArgs node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAArgs(AArgs node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAOrExpr(AOrExpr node)
    {
        defaultCase(node);
    }

    @Override
    public void caseANotAnOrExpr(ANotAnOrExpr node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAndExpr(AAndExpr node)
    {
        defaultCase(node);
    }

    @Override
    public void caseANotAnAndExpr(ANotAnAndExpr node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAEqualsEqualityExpr(AEqualsEqualityExpr node)
    {
        defaultCase(node);
    }

    @Override
    public void caseANotEqualsEqualityExpr(ANotEqualsEqualityExpr node)
    {
        defaultCase(node);
    }

    @Override
    public void caseANotAnEqualityExpr(ANotAnEqualityExpr node)
    {
        defaultCase(node);
    }

    @Override
    public void caseALessThanComparisonExpr(ALessThanComparisonExpr node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAGreaterThanComparisonExpr(AGreaterThanComparisonExpr node)
    {
        defaultCase(node);
    }

    @Override
    public void caseALessThanOrEqComparisonExpr(ALessThanOrEqComparisonExpr node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAGreaterThanOrEqComparisonExpr(AGreaterThanOrEqComparisonExpr node)
    {
        defaultCase(node);
    }

    @Override
    public void caseANotAComparisonExpr(ANotAComparisonExpr node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAddArithExpr(AAddArithExpr node)
    {
        defaultCase(node);
    }

    @Override
    public void caseASubArithExpr(ASubArithExpr node)
    {
        defaultCase(node);
    }

    @Override
    public void caseANotAnArithExpr(ANotAnArithExpr node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAMultiplyFactExpr(AMultiplyFactExpr node)
    {
        defaultCase(node);
    }

    @Override
    public void caseADivideFactExpr(ADivideFactExpr node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAModuloFactExpr(AModuloFactExpr node)
    {
        defaultCase(node);
    }

    @Override
    public void caseANotAFactExpr(ANotAFactExpr node)
    {
        defaultCase(node);
    }

    @Override
    public void caseANotUnaryExpr(ANotUnaryExpr node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAPlusUnaryExpr(APlusUnaryExpr node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAMinusUnaryExpr(AMinusUnaryExpr node)
    {
        defaultCase(node);
    }

    @Override
    public void caseANotAUnaryExpr(ANotAUnaryExpr node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAFieldPrimary(AFieldPrimary node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAMethodCallPrimary(AMethodCallPrimary node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAIntLiteralPrimary(AIntLiteralPrimary node)
    {
        defaultCase(node);
    }

    @Override
    public void caseACharLiteralPrimary(ACharLiteralPrimary node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAStrLiteralPrimary(AStrLiteralPrimary node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAFloatLiteralPrimary(AFloatLiteralPrimary node)
    {
        defaultCase(node);
    }

    @Override
    public void caseATrueLiteralPrimary(ATrueLiteralPrimary node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAFalseLiteralPrimary(AFalseLiteralPrimary node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAExprPrimary(AExprPrimary node)
    {
        defaultCase(node);
    }

    @Override
    public void caseANumericIntegerValue(ANumericIntegerValue node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAIdentifierIntegerValue(AIdentifierIntegerValue node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTComment(TComment node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTStringLiteral(TStringLiteral node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTCharLiteral(TCharLiteral node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTEscapeStringLiteral(TEscapeStringLiteral node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTEscape(TEscape node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTPlus(TPlus node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTMinus(TMinus node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTMult(TMult node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTDiv(TDiv node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTLessThan(TLessThan node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTLessThanOrEq(TLessThanOrEq node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTGreaterThan(TGreaterThan node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTGreaterThanOrEq(TGreaterThanOrEq node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTEquals(TEquals node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTAnd(TAnd node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTOr(TOr node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTNot(TNot node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTColon(TColon node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTSemicolon(TSemicolon node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTComma(TComma node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTLPar(TLPar node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTRPar(TRPar node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTLBrace(TLBrace node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTRBrace(TRBrace node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTLBkt(TLBkt node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTRBkt(TRBkt node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTNotEquals(TNotEquals node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTEqualTo(TEqualTo node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTPointer(TPointer node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTDot(TDot node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTModulo(TModulo node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTFloatLit(TFloatLit node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTWhiteSpace(TWhiteSpace node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTBool(TBool node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTBreak(TBreak node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTChar(TChar node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTConst(TConst node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTContinue(TContinue node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTKclass(TKclass node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTDo(TDo node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTElse(TElse node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTFalse(TFalse node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTFloat(TFloat node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTIf(TIf node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTInt(TInt node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTNew(TNew node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTNull(TNull node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTPrivate(TPrivate node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTProtected(TProtected node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTPublic(TPublic node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTReturn(TReturn node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTStatic(TStatic node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTString(TString node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTStruct(TStruct node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTThis(TThis node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTTrue(TTrue node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTWhile(TWhile node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTVoid(TVoid node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTIntegerLiteral(TIntegerLiteral node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTIdentifier(TIdentifier node)
    {
        defaultCase(node);
    }

    @Override
    public void caseEOF(EOF node)
    {
        defaultCase(node);
    }

    @Override
    public void caseInvalidToken(InvalidToken node)
    {
        defaultCase(node);
    }

    public void defaultCase(@SuppressWarnings("unused") Node node)
    {
        // do nothing
    }
}
