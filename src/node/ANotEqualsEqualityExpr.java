/* This file was generated by SableCC (http://www.sablecc.org/). */

package node;

import analysis.*;

@SuppressWarnings("nls")
public final class ANotEqualsEqualityExpr extends PEqualityExpr
{
    private PEqualityExpr _equalityExpr_;
    private TNotEquals _notEquals_;
    private PComparisonExpr _comparisonExpr_;

    public ANotEqualsEqualityExpr()
    {
        // Constructor
    }

    public ANotEqualsEqualityExpr(
        @SuppressWarnings("hiding") PEqualityExpr _equalityExpr_,
        @SuppressWarnings("hiding") TNotEquals _notEquals_,
        @SuppressWarnings("hiding") PComparisonExpr _comparisonExpr_)
    {
        // Constructor
        setEqualityExpr(_equalityExpr_);

        setNotEquals(_notEquals_);

        setComparisonExpr(_comparisonExpr_);

    }

    @Override
    public Object clone()
    {
        return new ANotEqualsEqualityExpr(
            cloneNode(this._equalityExpr_),
            cloneNode(this._notEquals_),
            cloneNode(this._comparisonExpr_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseANotEqualsEqualityExpr(this);
    }

    public PEqualityExpr getEqualityExpr()
    {
        return this._equalityExpr_;
    }

    public void setEqualityExpr(PEqualityExpr node)
    {
        if(this._equalityExpr_ != null)
        {
            this._equalityExpr_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._equalityExpr_ = node;
    }

    public TNotEquals getNotEquals()
    {
        return this._notEquals_;
    }

    public void setNotEquals(TNotEquals node)
    {
        if(this._notEquals_ != null)
        {
            this._notEquals_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._notEquals_ = node;
    }

    public PComparisonExpr getComparisonExpr()
    {
        return this._comparisonExpr_;
    }

    public void setComparisonExpr(PComparisonExpr node)
    {
        if(this._comparisonExpr_ != null)
        {
            this._comparisonExpr_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._comparisonExpr_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._equalityExpr_)
            + toString(this._notEquals_)
            + toString(this._comparisonExpr_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._equalityExpr_ == child)
        {
            this._equalityExpr_ = null;
            return;
        }

        if(this._notEquals_ == child)
        {
            this._notEquals_ = null;
            return;
        }

        if(this._comparisonExpr_ == child)
        {
            this._comparisonExpr_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._equalityExpr_ == oldChild)
        {
            setEqualityExpr((PEqualityExpr) newChild);
            return;
        }

        if(this._notEquals_ == oldChild)
        {
            setNotEquals((TNotEquals) newChild);
            return;
        }

        if(this._comparisonExpr_ == oldChild)
        {
            setComparisonExpr((PComparisonExpr) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
